import Foundation

//This is the structure for an edge for a graph
struct Edge {
    let dest: String
    let weight: Int
}

//A graph is made up of an adjacency list that contains the vertex and all its connecting edgdes
class Graph {
    var adjList: [String: [Edge]] = [:]
    
    
    //Simple functionality for adding an edge to a graph
    func addEdge(from source: String, to dest: String, weight: Int) {
        adjList[source, default: []].append(Edge(dest: dest, weight: weight))
        adjList[dest, default: []].append(Edge(dest: source, weight: weight)) // Undirected graph
    }
    
    
    //Dijkstras alg for shortest path (use a P-Queue to keep track of edge weights (assuming no neg edge weights))
    func dijkstraShortestPath(from start: String, to target: String) -> (path: [String], distance: Int)? {
        var distances: [String: Int] = [start: 0]
        var prevNode: [String: String] = [:]
        var pQueue = [(node: String, distance: Int)]()
        pQueue.append((node: start, distance: 0))
        
        //Algorithim iterates until the priority queue is empty
        while !pQueue.isEmpty {
            pQueue.sort { $0.distance < $1.distance }
            let (currentNode, currDist) = pQueue.removeFirst()
            
            //How to keep track of the path
            if currentNode == target {
                var path = [target]
                var node = target
                while let prev = prevNode[node] {
                    path.insert(prev, at: 0)
                    node = prev
                }
                return (path, currDist)
            }
            
            //Adding each edge to the P-Queu
            for edge in adjList[currentNode] ?? [] {
                let newDistance = currDist + edge.weight
                if newDistance < (distances[edge.dest] ?? Int.max) {
                    distances[edge.dest] = newDistance
                    prevNode[edge.dest] = currentNode
                    pQueue.append((node: edge.dest, distance: newDistance))
                }
            }
        }
        return nil
    }
}

// Example Usage (Generated by gbt)
let graph = Graph()
graph.addEdge(from: "A", to: "B", weight: 4)
graph.addEdge(from: "A", to: "C", weight: 2)
graph.addEdge(from: "B", to: "C", weight: 5)
graph.addEdge(from: "B", to: "D", weight: 10)
graph.addEdge(from: "C", to: "D", weight: 3)



